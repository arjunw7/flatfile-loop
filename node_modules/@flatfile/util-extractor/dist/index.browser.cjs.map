{"version":3,"sources":["../src/index.ts"],"names":["api","FlatfileClient","WORKBOOK_CREATION_DELAY","Extractor","fileExt","extractorType","parseBuffer","options","listener","event","fileId","file","jobs","Flatfile","jobId","spaceId","chunkSize","parallel","debug","tick","progress","info","buffer","getFileBuffer","entitlements","headerSelectionEnabled","e","sourceEditorEnabled","capture","workbook","createWorkbook","processedRecords","totalLength","acc","sheet","resolve","createAllRecords","normalizeRecordKeys","_progress","part","totalParts","updateSheetMetadata","environmentId","workbookCapture","workbookConfig","getWorkbookConfig","name","sheets","sheetName","getSheetConfig","headers","descriptions","slugify","keysToFields","normalizeKey","key","record","normalizedRecord","keys","index","countOfKeys","incrementKey","a","b","_","metadata"],"mappings":"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","file":"index.browser.cjs","sourcesContent":["import { Flatfile, FlatfileClient } from '@flatfile/api'\nimport type { FlatfileListener } from '@flatfile/listener'\nimport { createAllRecords, slugify } from '@flatfile/util-common'\nimport { getFileBuffer } from '@flatfile/util-file-buffer'\n\nconst api = new FlatfileClient()\n\nconst WORKBOOK_CREATION_DELAY = 3_000\n\nexport const Extractor = (\n  fileExt: string | RegExp,\n  extractorType: string,\n  parseBuffer: (\n    buffer: Buffer,\n    options: any\n  ) => WorkbookCapture | Promise<WorkbookCapture>,\n  options?: Record<string, any>\n) => {\n  return (listener: FlatfileListener) => {\n    listener.on('file:created', async (event) => {\n      const { fileId } = event.context\n      const { data: file } = await api.files.get(fileId)\n      if (file.mode === 'export') {\n        return\n      }\n\n      if (typeof fileExt === 'string' && !file.name.endsWith(fileExt)) {\n        return\n      }\n\n      if (fileExt instanceof RegExp && !fileExt.test(file.name)) {\n        return\n      }\n\n      const jobs = await api.jobs.create({\n        type: Flatfile.JobType.File,\n        operation: `extract-plugin-${extractorType}`,\n        status: Flatfile.JobStatus.Ready,\n        source: fileId,\n      })\n      await api.jobs.execute(jobs.data.id)\n    })\n    listener.on(\n      'job:ready',\n      { operation: `extract-plugin-${extractorType}` },\n      async (event) => {\n        const { fileId, jobId, spaceId } = event.context\n        const { chunkSize, parallel, debug } = {\n          chunkSize: 5_000,\n          parallel: 1,\n          debug: false,\n          ...options,\n        }\n\n        const tick = async (progress: number, info?: string) => {\n          await api.jobs.ack(jobId, { progress, info })\n          if (debug) {\n            console.log(`Job progress: ${progress}, Info: ${info}`)\n          }\n        }\n\n        try {\n          await tick(1, 'Retrieving file')\n          const { data: file } = await api.files.get(fileId)\n          const buffer = await getFileBuffer(event)\n\n          const { data: entitlements } = await api.entitlements.list({\n            resourceId: spaceId,\n          })\n          const headerSelectionEnabled = !!entitlements.find(\n            (e) => e.key === 'headerSelection'\n          )\n\n          const sourceEditorEnabled = !!entitlements.find(\n            (e) => e.key === 'sourceEditor'\n          )\n\n          await tick(3, 'Parsing Sheets')\n          const capture = await parseBuffer(buffer, {\n            ...options,\n            fileId,\n            fileExt: file.ext,\n            headerSelectionEnabled,\n          })\n\n          await tick(5, 'Creating workbook')\n          const workbook = await createWorkbook(\n            event.context.environmentId,\n            file,\n            capture,\n            sourceEditorEnabled\n          )\n\n          // Add workbook to file so if the extraction fails and the file is deleted, the workbook is also deleted\n          // instead of being orphaned\n          await api.files.update(file.id, {\n            workbookId: workbook.id,\n          })\n\n          if (!workbook.sheets || workbook.sheets.length === 0) {\n            throw new Error('No Sheets found')\n          }\n\n          await tick(10, 'Adding records to Sheets')\n\n          let processedRecords = 0\n          const totalLength = Object.values(capture).reduce(\n            (acc: number, sheet: any) => acc + (sheet?.data?.length || 0),\n            0\n          )\n\n          await new Promise((resolve) => {\n            setTimeout(resolve, WORKBOOK_CREATION_DELAY)\n          })\n\n          for (const sheet of workbook.sheets) {\n            if (!capture[sheet.name]) {\n              continue\n            }\n            await createAllRecords(\n              sheet.id,\n              capture[sheet.name].data.map(normalizeRecordKeys),\n              async (_progress, part, totalParts) => {\n                await tick(\n                  Math.min(99, Math.round(10 + 90 * (part / totalParts))),\n                  'Adding records to Sheets'\n                )\n              }\n            )\n          }\n\n          // After all records are added, update the sheet metadata\n          if (headerSelectionEnabled) {\n            await updateSheetMetadata(workbook, capture)\n          }\n\n          await api.files.update(file.id, {\n            status: 'complete',\n          })\n          await api.jobs.complete(jobId, {\n            info: 'Extraction complete',\n            outcome: {\n              message: 'Extracted file',\n            },\n          })\n        } catch (e) {\n          if (debug) {\n            console.log(`Extractor error: ${e.message}`)\n          }\n          await api.files.update(fileId, {\n            status: 'failed',\n          })\n          await api.jobs.fail(jobId, {\n            info: 'Extraction failed',\n            outcome: {\n              message: e.message,\n            },\n          })\n        }\n      }\n    )\n  }\n}\n\nasync function createWorkbook(\n  environmentId: string,\n  file: Flatfile.File_,\n  workbookCapture: WorkbookCapture,\n  sourceEditorEnabled: boolean\n): Promise<Flatfile.Workbook> {\n  const workbookConfig = getWorkbookConfig(\n    file.name,\n    file.spaceId,\n    environmentId,\n    workbookCapture,\n    sourceEditorEnabled\n  )\n  const { data: workbook } = await api.workbooks.create(workbookConfig)\n  return workbook\n}\n\nfunction getWorkbookConfig(\n  name: string,\n  spaceId: string,\n  environmentId: string,\n  workbookCapture: WorkbookCapture,\n  sourceEditorEnabled: boolean\n): Flatfile.CreateWorkbookConfig {\n  const sheets = Object.entries(workbookCapture).map(([sheetName, sheet]) => {\n    return getSheetConfig(sheetName, sheet, sourceEditorEnabled)\n  })\n\n  return {\n    name: `[file] ${name}`,\n    labels: ['file'], // we use this on the backend to add the EXTRACTED_FROM_SOURCE treatment to the workbook on previous versions of the plugin\n    spaceId,\n    environmentId,\n    sheets,\n    treatments: [Flatfile.WorkbookTreatments.ExtractedFromSource],\n  }\n}\n\nfunction getSheetConfig(\n  name: string,\n  { headers, descriptions }: SheetCapture,\n  sourceEditorEnabled: boolean\n): Flatfile.SheetConfig {\n  return {\n    name,\n    slug: slugify(name),\n    fields: keysToFields({ keys: headers, descriptions }),\n    allowAdditionalFields: sourceEditorEnabled,\n  }\n}\n\nfunction normalizeKey(key: string): string {\n  return key.trim().replace(/%/g, '_PERCENT_').replace(/\\$/g, '_DOLLAR_')\n}\n\nfunction normalizeRecordKeys(record: Flatfile.RecordData): Flatfile.RecordData {\n  const normalizedRecord = {} as Flatfile.RecordData\n  for (const key in record) {\n    if (record.hasOwnProperty(key)) {\n      normalizedRecord[normalizeKey(key)] = record[key]\n    }\n  }\n  return normalizedRecord\n}\n\nexport function keysToFields({\n  keys,\n  descriptions = {},\n}: {\n  keys: string[]\n  descriptions?: Record<string, string>\n}): Flatfile.Property[] {\n  let index = 0\n  const countOfKeys: Record<\n    string,\n    { count: number; index: number; metadata?: { fieldRef: string } }\n  > = keys.reduce((acc, key) => {\n    if (!key) key = ''\n    if (typeof key !== 'string') {\n      key = String(key)\n    }\n    key = key.trim()\n    if (key === '') {\n      key = 'empty'\n    }\n    if (acc[key]) {\n      const incrementKey = `${key}_${acc[key].count}`\n      acc[incrementKey] = { count: 1, index }\n      acc[key].count++\n    } else {\n      acc[key] = { count: 1, index }\n    }\n    index++\n    return acc\n  }, {})\n  return Object.entries(countOfKeys)\n    .sort((a, b) => a[1].index - b[1].index)\n    .map(([key, _]) => ({\n      key: normalizeKey(key),\n      label: key,\n      description: descriptions?.[key] || '',\n      type: 'string',\n    }))\n}\n\nasync function updateSheetMetadata(\n  workbook: Flatfile.Workbook,\n  workbookCapture: WorkbookCapture\n): Promise<void> {\n  await Promise.all(\n    workbook.sheets.map(async (sheet) => {\n      const { metadata } = workbookCapture[sheet.name]\n      await api.sheets.updateSheet(sheet.id, {\n        metadata,\n      })\n    })\n  )\n}\n/**\n * Generic structure for capturing a workbook\n */\nexport type WorkbookCapture = Record<string, SheetCapture>\n\n/**\n * Generic structure for capturing a sheet\n */\nexport type SheetCapture = {\n  headers: string[]\n  descriptions?: Record<string, null | string> | null\n  data: Flatfile.RecordData[]\n  metadata?: { rowHeaders: number[] }\n}\n"]}