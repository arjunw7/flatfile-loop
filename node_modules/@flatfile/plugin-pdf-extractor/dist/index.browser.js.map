{"version":3,"sources":["../src/plugin.ts","../src/index.ts"],"names":["api","FlatfileClient","run","event","file","buffer","opts","environmentId","spaceId","logError","url","fileName","currentEpoch","formData","FormData","fetchOptions","response","fetch","data","err","reader","uploadError","convertError","logInfo","pdfExtractorPlugin","listener","fileBuffer","fileResource"],"mappings":"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","file":"index.browser.js","sourcesContent":["import type { Flatfile } from '@flatfile/api'\nimport { FlatfileClient } from '@flatfile/api'\nimport type { FlatfileEvent } from '@flatfile/listener'\nimport { logError, logInfo } from '@flatfile/util-common'\nimport fetch from 'cross-fetch'\nimport FormData from 'form-data'\nimport * as fs from 'fs-extra'\nimport * as R from 'remeda'\n\nconst api = new FlatfileClient()\nexport interface PluginOptions {\n  readonly apiKey: string\n  readonly debug?: boolean\n}\n\nexport const run = async (\n  event: FlatfileEvent,\n  file: Flatfile.File_,\n  buffer: Buffer,\n  opts: PluginOptions\n): Promise<void> => {\n  const { environmentId, spaceId } = event.context\n\n  if (file.ext !== 'pdf' || file.mode !== 'import') {\n    return\n  }\n\n  if (R.isEmpty(opts.apiKey)) {\n    logError('@flatfile/plugin-pdf-extractor', 'Found invalid API key')\n\n    return\n  }\n\n  try {\n    const url: string = `https://pdftables.com/api?key=${opts.apiKey}&format=csv`\n    const fileName: string = `${file.name.replace(\n      '.pdf',\n      ''\n    )} (Converted PDF)-${currentEpoch()}.csv`\n\n    const formData = new FormData()\n    formData.append('file', buffer, { filename: file.name })\n\n    const fetchOptions = {\n      method: 'POST',\n      body: formData as any,\n      headers: formData.getHeaders(),\n    }\n\n    const response = await fetch(url, fetchOptions)\n\n    if (response.status !== 200) {\n      logError(\n        '@flatfile/plugin-pdf-extractor',\n        'Failed to convert PDF on pdftables.com'\n      )\n      return\n    }\n\n    const data = await response.text()\n\n    fs.writeFile(fileName, data, async (err: unknown) => {\n      if (err) {\n        if (opts.debug) {\n          logError(\n            '@flatfile/plugin-pdf-extractor',\n            'Error writing file to disk'\n          )\n        }\n\n        return\n      }\n\n      try {\n        const reader = fs.createReadStream(fileName)\n\n        await api.files.upload(reader, {\n          spaceId,\n          environmentId,\n          mode: 'import',\n        })\n\n        reader.close()\n      } catch (uploadError: unknown) {\n        if (opts.debug) {\n          logError(\n            '@flatfile/plugin-pdf-extractor',\n            'Failed to upload PDF->CSV file'\n          )\n        }\n\n        logError(\n          '@flatfile/plugin-pdf-extractor',\n          JSON.stringify(uploadError, null, 2)\n        )\n      }\n    })\n  } catch (convertError: unknown) {\n    logError(\n      '@flatfile/plugin-pdf-extractor',\n      JSON.stringify(convertError, null, 2)\n    )\n  }\n\n  if (opts.debug) {\n    logInfo('@flatfile/plugin-pdf-extractor', 'Done')\n  }\n}\n\nconst currentEpoch = (): string => {\n  return `${Math.floor(Date.now() / 1000)}`\n}\n","import type { FlatfileListener } from '@flatfile/listener'\nimport { fileBuffer } from '@flatfile/util-file-buffer'\n\nimport { PluginOptions, run } from './plugin'\n\n/**\n * PDF extractor plugin for Flatfile.\n *\n * @param opts - plugin config options\n */\nexport const pdfExtractorPlugin = (opts: PluginOptions) => {\n  return (listener: FlatfileListener) => {\n    listener.use(\n      fileBuffer('.pdf', async (fileResource, buffer, event) => {\n        await run(event, fileResource, buffer, opts)\n      })\n    )\n  }\n}\n"]}