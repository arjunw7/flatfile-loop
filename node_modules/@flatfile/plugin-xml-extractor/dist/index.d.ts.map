{"mappings":";AAIA,6BACE,MAAM,EAAE,MAAM,EACd,OAAO,CAAC,EAAE;IACR,SAAS,CAAC,EAAE,MAAM,CAAA;IAClB,eAAe,CAAC,EAAE,MAAM,CAAA;IACxB,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;CAC9D,GACA,eAAe,CAcjB;ACtBD,OAAO,MAAM,yBAA0B;IACrC,SAAS,CAAC,EAAE,MAAM,CAAA;IAClB,eAAe,CAAC,EAAE,MAAM,CAAA;IACxB,SAAS,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,MAAM,EAAE,GAAG,CAAC,KAAK,OAAO,MAAM,EAAE,GAAG,CAAC,CAAA;IAC7D,SAAS,CAAC,EAAE,MAAM,CAAA;IAClB,QAAQ,CAAC,EAAE,MAAM,CAAA;IACjB,KAAK,CAAC,EAAE,OAAO,CAAA;CAChB,sEAEA,CAAA;AAED,OAAO,MAAM,6BAAuB,CAAA","sources":["plugins/xml-extractor/src/src/parser.ts","plugins/xml-extractor/src/src/index.ts","plugins/xml-extractor/src/index.ts"],"sourcesContent":[null,null,"import { Extractor } from '@flatfile/util-extractor'\nimport { parseBuffer } from './parser'\n\nexport const XMLExtractor = (options?: {\n  separator?: string\n  attributePrefix?: string\n  transform?: (row: Record<string, any>) => Record<string, any>\n  chunkSize?: number\n  parallel?: number\n  debug?: boolean\n}) => {\n  return Extractor('.xml', 'xml', parseBuffer, options)\n}\n\nexport const xmlParser = parseBuffer\n"],"names":[],"version":3,"file":"index.d.ts.map","sourceRoot":"../../../"}