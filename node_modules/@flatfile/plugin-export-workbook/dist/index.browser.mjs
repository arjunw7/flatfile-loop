import{jobHandler as e}from"@flatfile/plugin-job-handler";import{FlatfileClient as t}from"@flatfile/api";import{logInfo as o,processRecords as l,logError as a}from"@flatfile/util-common";import*as i from"fs";import r from"path";import*as n from"remeda";import*as s from"xlsx";function c(e,t){let o=e.replace(/[\\\/\?\*\[\]:<>|"]/g,"").trim();return o=o.replace(/^'+|'+$/g,""),o.length>31&&(o=o.substring(0,31)),0===o.length&&(o=`Sheet${t+1}`),o}function d(e){let t,o=e[0],l=1;for(;l<e.length;){const a=e[l],i=e[l+1];if(l+=2,("optionalAccess"===a||"optionalCall"===a)&&null==o)return;"access"===a||"optionalAccess"===a?(t=o,o=i(o)):"call"!==a&&"optionalCall"!==a||(o=i(((...e)=>o.call(t,...e))),t=void 0)}return o}const f=new t,p=(t={})=>e({job:t.jobName||"workbook:downloadWorkbook"},(async(e,p)=>await(async(e,t,p)=>{const{environmentId:u,spaceId:w,workbookId:g}=e.context;try{await p(1,"Starting Excel export job");const{data:e}=await f.workbooks.get(g),{data:k}=await f.sheets.list({workbookId:g}),m=function(e){let t=e.replace(/[\/\?%\*:|"<>]/g,"_");return t=t.replace(/[^\x00-\x7F]/g,""),t}(e.name);if(t.debug){const e=n.pipe(k,n.reduce(((e,t)=>e+`\n\t'${t.name}' (${t.id})`),""));o("@flatfile/plugin-export-workbook",`Sheets found in Flatfile workbook: ${e}`)}const h=s.utils.book_new();for(const[e,i]of k.entries())if(d([t,"access",e=>e.excludedSheets,"optionalAccess",e=>e.includes,"call",e=>e(i.config.slug)]))t.debug&&o("@flatfile/plugin-export-workbook",`Skipping sheet: ${i.name}`);else try{let o=await l(i.id,(e=>n.pipe(e,n.map((({id:e,values:o})=>{const l=n.pipe(Object.keys(o),n.reduce(((e,l)=>d([t,"access",e=>e.excludeFields,"optionalAccess",e=>e.includes,"call",e=>e(l)])?e:{...e,[l]:(e=>{const{value:t,messages:o}=e,l={t:"s",v:Array.isArray(t)?t.join(", "):t,c:[]};return n.length(o)>0&&(l.c=o.map((e=>({a:"Flatfile",t:`[${e.type.toUpperCase()}]: ${e.message}`,T:!0}))),l.c.hidden=!0),l})(o[l])}),{}));return d([t,"optionalAccess",e=>e.includeRecordIds])?{recordId:e,...l}:l})))),{filter:t.recordFilter});if(!o||o.every((e=>0===e.length))){const e={t:"s",v:"",c:[]};o=[i.config.fields.map((t=>({[t.key]:e})))]}const a=o.flat(),r=s.utils.json_to_sheet(a);s.utils.book_append_sheet(h,r,c(i.name,e)),await p(Math.round((e+1)/k.length*70),`${i.name} Prepared`)}catch(e){throw a("@flatfile/plugin-export-workbook",`Failed to fetch records for sheet with id: ${i.id}`),new Error(`Failed to fetch records for sheet with id: ${i.id}`)}const x=`${m}-${(new Date).toISOString()}.xlsx`,b=r.join("/tmp",x);if(0===h.SheetNames.length)throw t.debug&&a("@flatfile/plugin-export-workbook","No data to write to Excel file"),new Error("No data to write to Excel file.");try{s.set_fs(i),s.writeFile(h,b),await p(80,"Excel file written to disk"),t.debug&&o("@flatfile/plugin-export-workbook","File written to disk")}catch(e){throw a("@flatfile/plugin-export-workbook","Failed to write file to disk"),new Error("Failed writing the Excel file to disk.")}let y;try{const e=i.createReadStream(b),{data:l}=await f.files.upload(e,{spaceId:w,environmentId:u,mode:"export"});y=l.id,await p(90,"Excel file uploaded to Flatfile"),e.close(),await i.promises.unlink(b),t.debug&&o("@flatfile/plugin-export-workbook",`Excel document uploaded. View file at https://spaces.flatfile.com/space/${w}/files?mode=export`)}catch(e){throw a("@flatfile/plugin-export-workbook","Failed to upload file"),new Error("Failed uploading Excel file to Flatfile.")}return t.debug&&o("@flatfile/plugin-export-workbook","Done"),t.autoDownload?{outcome:{heading:"Success!",message:"Data was successfully written to Excel file and uploaded. The download should start automatically.",next:{type:"files",files:[{fileId:y}]}}}:{outcome:{acknowledge:!0,message:'Data was successfully written to Excel file and uploaded. You can access the workbook in the "Available Downloads" section of the Files page in Flatfile.',next:{type:"id",id:w,path:"files",query:"mode=export",label:"See all downloads"}}}}catch(e){throw a("@flatfile/plugin-export-workbook",e),new Error(e.message)}})(e,t,p)));export{p as exportRecordsPlugin,p as exportWorkbookPlugin};
