{"version":3,"sources":["../src/async.helpers.ts","../src/all.records.ts","../src/async.batch.ts","../src/delete.records.ts","../src/logging.helper.ts","../src/slugify.ts","../src/simple.records.ts"],"names":["asyncLimitSeries","limit","fn","response","i","res","api","FlatfileClient","DEFAULT_PAGE_SIZE","getRecordsRaw","sheetId","options","queryParams","key","value","v","baseUrl","token","getCredentials","url","httpResponse","fetch","e","getSheetLength","counts","processRecords","callback","pageSize","totalRecords","totalPageCount","results","pageNumber","records","record","result","createRecords","updateRecords","updateAllRecords","tick","recordCount","pageCount","index","start","end","createAllRecords","CrossEnvConfig","asyncBatch","arr","event","chunkSize","parallel","debug","chunks","chunkify","processChunk","chunkIndex","threadId","currentIndex","processChunks","promises","_","deleteRecords","config","sheet","error","log","packageName","msg","type","status","logInfo","logWarn","logError","slugify","str","PAGE_SIZE","Simplified","_Simplified","recordPages","obj","r"],"mappings":"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","file":"index.cjs","sourcesContent":["export async function asyncLimitSeries<T>(\n  limit: number,\n  fn: (i: number) => Promise<T>\n): Promise<T[]> {\n  let response = []\n\n  for (let i = 0; i < limit; i++) {\n    const res = await fn(i)\n    response.push(res)\n  }\n\n  return response\n}\n","import { Flatfile, FlatfileClient } from '@flatfile/api'\nimport { CrossEnvConfig } from '@flatfile/cross-env-config'\nimport fetch from 'cross-fetch'\nimport { asyncLimitSeries } from './async.helpers'\n\nconst api = new FlatfileClient()\n\nconst DEFAULT_PAGE_SIZE = 10_000\n\nexport async function getRecordsRaw(\n  sheetId: string,\n  options: Flatfile.records.GetRecordsRequest = {}\n): Promise<Array<Flatfile.Record_>> {\n  const queryParams = new URLSearchParams()\n  queryParams.set('pageNumber', String(options.pageNumber ?? 1))\n  queryParams.set('pageSize', String(options.pageSize ?? DEFAULT_PAGE_SIZE))\n\n  Object.entries(options).forEach(([key, value]) => {\n    if (value !== undefined) {\n      if (Array.isArray(value)) {\n        value.map((v) => queryParams.append(key, String(v)))\n      } else {\n        queryParams.set(key, String(value))\n      }\n    }\n  })\n\n  const { baseUrl, token } = getCredentials()\n\n  const url = `${baseUrl}/v1/sheets/${sheetId}/records?${queryParams}`\n  const httpResponse = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n    },\n  })\n\n  if (!httpResponse.ok) {\n    throw new Error(`Reading ${options.pageNumber ?? 1} of ${sheetId} failed.`)\n  }\n\n  try {\n    const res = await httpResponse.json()\n    return res.data?.records ?? []\n  } catch (e) {\n    console.log(e)\n    return []\n  }\n}\n\nexport async function getSheetLength(sheetId: string): Promise<number> {\n  const {\n    data: { counts },\n  } = await api.sheets.getRecordCounts(sheetId)\n  return counts.total\n}\n\nexport async function processRecords<R>(\n  sheetId: string,\n  callback: (\n    records: Flatfile.RecordsWithLinks,\n    pageNumber?: number,\n    totalPageCount?: number\n  ) => R | void | Promise<R | void>,\n  options: Omit<Flatfile.records.GetRecordsRequest, 'pageNumber'> = {}\n): Promise<R[] | void> {\n  const pageSize = options.pageSize ?? DEFAULT_PAGE_SIZE\n  const totalRecords = await getSheetLength(sheetId)\n  const totalPageCount = Math.ceil(totalRecords / pageSize) || 1\n  const results: R[] = []\n\n  for (let pageNumber = 1; pageNumber <= totalPageCount; pageNumber++) {\n    try {\n      const records = (await getRecordsRaw(sheetId, {\n        ...options,\n        pageSize,\n        pageNumber,\n      })) as Flatfile.Record_[]\n\n      // Delete updatedAt\n      records.forEach((record) =>\n        Object.values(record.values).forEach(\n          (value: Record<string, Flatfile.CellValue>) => delete value.updatedAt\n        )\n      )\n\n      const result = await callback(records, pageNumber, totalPageCount)\n      if (result !== undefined && result !== null) {\n        results.push(result as R)\n      }\n    } catch (e) {\n      // log error and continue processing\n      console.error(e)\n    }\n  }\n\n  return results.length ? results : undefined\n}\n\n/**\n * Creates records in a sheet. Bypasses API SDK in order to suppress hooks\n */\nexport async function createRecords(\n  sheetId: string,\n  records: Flatfile.RecordData[]\n): Promise<string> {\n  const { baseUrl, token } = getCredentials()\n\n  const httpResponse = await fetch(`${baseUrl}/v1/sheets/${sheetId}/records`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n      'x-force-hooks': 'true',\n    },\n    body: JSON.stringify(records),\n  })\n\n  if (!httpResponse.ok) {\n    console.log(await httpResponse?.text())\n    throw new Error(`Creating records failed.`)\n  }\n  const res = await httpResponse.json()\n  return res.data.commitId\n}\n\n/**\n * Updates records in a sheet. Bypasses API SDK in order to suppress hooks\n */\nexport async function updateRecords(\n  sheetId: string,\n  records: any\n): Promise<string> {\n  const { baseUrl, token } = getCredentials()\n\n  const httpResponse = await fetch(`${baseUrl}/v1/sheets/${sheetId}/records`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json',\n      'x-force-hooks': 'true',\n    },\n    body: JSON.stringify(records),\n  })\n\n  if (httpResponse.status === 304) {\n    return 'not-modified'\n  }\n\n  if (!httpResponse.ok) {\n    console.log(await httpResponse?.text())\n    throw new Error(`Updating records failed.`)\n  }\n\n  const res = await httpResponse.json()\n  return res.data.commitId\n}\n\n/**\n * Updates records in a sheet. Bypasses API SDK in order to suppress hooks\n */\nexport async function updateAllRecords(\n  sheetId: string,\n  records: Flatfile.Record_[],\n  tick?: TickHelper\n): Promise<void> {\n  const recordCount = records.length\n  const pageCount = Math.ceil(recordCount / DEFAULT_PAGE_SIZE)\n  await asyncLimitSeries(pageCount, async (index: number) => {\n    const start = index * DEFAULT_PAGE_SIZE\n    const end =\n      start + DEFAULT_PAGE_SIZE <= records.length\n        ? start + DEFAULT_PAGE_SIZE\n        : records.length\n    await tick?.((index + 1) / pageCount, index + 1, pageCount).catch(\n      console.log\n    )\n    return updateRecords(sheetId, records.slice(index * DEFAULT_PAGE_SIZE, end))\n  })\n}\n\n/**\n * Creates many records in a sheet. Bypasses API SDK in order to suppress hooks\n */\nexport async function createAllRecords(\n  sheetId: string,\n  records: Flatfile.RecordData[],\n  tick?: TickHelper\n): Promise<void> {\n  const recordCount = records.length\n  const pageCount = Math.ceil(recordCount / DEFAULT_PAGE_SIZE)\n  await asyncLimitSeries(pageCount, async (index: number) => {\n    const start = index * DEFAULT_PAGE_SIZE\n    const end =\n      start + DEFAULT_PAGE_SIZE <= records.length\n        ? start + DEFAULT_PAGE_SIZE\n        : records.length\n    await tick?.((index + 1) / pageCount, index + 1, pageCount).catch(\n      console.log\n    )\n    return createRecords(sheetId, records.slice(index * DEFAULT_PAGE_SIZE, end))\n  })\n}\n\nexport type TickHelper = (\n  progress: number,\n  part: number,\n  totalParts: number\n) => Promise<void>\n\nfunction getCredentials() {\n  const baseUrl =\n    CrossEnvConfig.get('AGENT_INTERNAL_URL') ||\n    CrossEnvConfig.get('FLATFILE_API_URL') ||\n    'https://platform.flatfile.com/api'\n  const token =\n    CrossEnvConfig.get('FLATFILE_BEARER_TOKEN') ||\n    CrossEnvConfig.get('FLATFILE_API_KEY')\n\n  return { baseUrl, token }\n}\n","import type { FlatfileEvent } from '@flatfile/listener'\n\nexport async function asyncBatch<T, R>(\n  arr: T[],\n  callback: (chunk: T[], event?: FlatfileEvent) => Promise<R>,\n  options: { chunkSize?: number; parallel?: number; debug?: boolean } = {},\n  event?: FlatfileEvent\n): Promise<R[]> {\n  const { chunkSize = 10_000, parallel = 1, debug = false } = options\n  const chunks = chunkify<T>(arr, chunkSize)\n\n  if (debug) {\n    console.log(`${chunks.length} chunks to be processed`)\n  }\n\n  const results: Map<number, R> = new Map()\n\n  async function processChunk(\n    chunkIndex: number,\n    threadId: number\n  ): Promise<void> {\n    if (debug) {\n      console.log(`Thread ${threadId} processing chunk ${chunkIndex}`)\n    }\n\n    const result = await callback(chunks[chunkIndex], event)\n    results.set(chunkIndex, result)\n  }\n\n  let currentIndex = 0\n  async function processChunks(threadId: number): Promise<void> {\n    while (currentIndex < chunks.length) {\n      const chunkIndex = currentIndex++\n      await processChunk(chunkIndex, threadId)\n    }\n  }\n\n  const promises: Promise<void>[] = Array.from({ length: parallel }, (_, i) =>\n    processChunks(i)\n  )\n\n  await Promise.all(promises)\n\n  if (debug) {\n    console.log('All chunks processed')\n  }\n\n  return Array.from(results.values())\n}\n\nexport function chunkify<T>(arr: T[], chunkSize: number): T[][] {\n  if (chunkSize <= 0) {\n    return []\n  }\n\n  return Array.from({ length: Math.ceil(arr.length / chunkSize) }, (_, i) =>\n    arr.slice(i * chunkSize, i * chunkSize + chunkSize)\n  )\n}\n","import type { Flatfile } from '@flatfile/api'\nimport { FlatfileClient } from '@flatfile/api'\n\nconst api = new FlatfileClient()\n\nexport async function deleteRecords(\n  sheetId: string,\n  config: Omit<Flatfile.DeleteRecordsJobConfig, 'sheet'>\n): Promise<void> {\n  try {\n    const { data: sheet } = await api.sheets.get(sheetId)\n    await api.jobs.create({\n      type: 'workbook',\n      operation: 'delete-records',\n      trigger: 'immediate',\n      source: sheet.workbookId,\n      config: {\n        ...config,\n        sheet: sheetId,\n      },\n    })\n  } catch (error) {\n    console.error('Error deleting records:', error)\n    throw new Error('Error deleting records')\n  }\n}\n","type LogType = 'log' | 'warn' | 'error'\n\nexport const log = (\n  packageName: string,\n  msg: string,\n  type: LogType = 'log'\n): void => {\n  const status = {\n    log: 'INFO',\n    warn: 'WARN',\n    error: 'FATAL',\n  }\n  console[type](`[${packageName}]:[${status[type]}] ${msg}`)\n}\n\nexport const logInfo = (packageName: string, msg: string): void => {\n  log(packageName, msg)\n}\n\nexport const logWarn = (packageName: string, msg: string): void => {\n  log(packageName, msg, 'warn')\n}\n\nexport const logError = (packageName: string, msg: string): void => {\n  log(packageName, msg, 'error')\n}\n","export const slugify = (str: string) =>\n  str\n    .trim()\n    .replace(/[^\\w\\s-]/g, '')\n    .replace(/[\\s_-]+/g, '-')\n    .replace(/^-+|-+$/g, '')\n","import { Flatfile } from '@flatfile/api'\nimport {\n  createAllRecords,\n  getRecordsRaw,\n  getSheetLength,\n  TickHelper,\n  updateAllRecords,\n} from './all.records'\nimport { asyncLimitSeries } from './async.helpers'\n\nconst PAGE_SIZE = 2000\n\nexport class Simplified {\n  /**\n   * Return all records for a sheet\n   *\n   * @param sheetId\n   * @param options\n   * @param tick\n   */\n  static async getAllRecords(\n    sheetId: string,\n    options: Flatfile.records.GetRecordsRequest = {},\n    tick?: TickHelper\n  ): Promise<SimpleRecord[]> {\n    const recordCount = await getSheetLength(sheetId)\n    const pageSize = options.pageSize || PAGE_SIZE\n    const pageCount = Math.ceil(recordCount / pageSize)\n\n    const recordPages = await asyncLimitSeries(pageCount, async (i: number) => {\n      await tick?.((i + 1) / pageCount, i + 1, pageCount).catch(console.log)\n      const res = await getRecordsRaw(sheetId, {\n        ...options,\n        pageNumber: i + 1,\n        pageSize,\n      })\n      return res.map(Simplified.toSimpleRecord)\n    })\n    return recordPages.flat(1)\n  }\n\n  /**\n   * Return all records for a sheet by iterating until there are empty pages.\n   * This is most useful in scenarios where pages are generally small but you want\n   * to safely handle edge cases. It avoids another count request.\n   *\n   * @param sheetId\n   * @param options\n   */\n  static async getAllRecordsSeries(\n    sheetId: string,\n    options: Flatfile.records.GetRecordsRequest = {}\n  ): Promise<SimpleRecord[]> {\n    const pageSize = options.pageSize || PAGE_SIZE\n\n    const recordPages: SimpleRecord[][] = []\n    let pageNumber = 1\n    while (true) {\n      const res = await getRecordsRaw(sheetId, {\n        ...options,\n        pageSize,\n        pageNumber,\n      })\n\n      recordPages.push(res.map(Simplified.toSimpleRecord))\n      pageNumber += 1\n      if (res.length < pageSize) {\n        break\n      }\n    }\n\n    return recordPages.flat(1)\n  }\n\n  static async findRecordsLimit(\n    sheetId: string,\n    options: Flatfile.records.GetRecordsRequest,\n    limit = 100\n  ) {\n    const records = await getRecordsRaw(sheetId, {\n      ...options,\n      pageSize: limit,\n      pageNumber: 1,\n    })\n    if (Array.isArray(records)) {\n      return records.map(Simplified.toSimpleRecord)\n    }\n    return []\n  }\n\n  /**\n   * { foo: bar } => { foo : {value: bar}}\n   * @param obj\n   */\n  static toRecordValues(obj: SimpleRecord): Flatfile.RecordData {\n    return Object.fromEntries(\n      Object.entries(obj)\n        .filter(([key]) => key !== '_id' && key !== '_metadata')\n        .map(([key, value]) => [key, { value: value as Primitive }])\n    )\n  }\n\n  static toStandardRecord(obj: SimpleRecord) {\n    return {\n      id: obj._id as string,\n      metadata: obj._metadata as any,\n      values: Simplified.toRecordValues(obj),\n    }\n  }\n\n  /**\n   *\n   * @param r\n   */\n  static toSimpleRecord(r: Flatfile.Record_): SimpleRecord {\n    const obj = Object.fromEntries(\n      Object.entries(r.values).map(\n        ([key, value]) => [key, value.value] as [string, any]\n      )\n    )\n    obj._id = r.id\n    obj._metadata = r.metadata\n    return obj as SimpleRecord\n  }\n\n  static updateAllRecords(\n    sheetId: string,\n    records: SimpleRecord[],\n    tick?: TickHelper\n  ): Promise<void> {\n    return updateAllRecords(\n      sheetId,\n      records.map(Simplified.toStandardRecord),\n      tick\n    )\n  }\n\n  static async createAllRecords(\n    sheetId: string,\n    records: SimpleValues[],\n    tick?: TickHelper\n  ): Promise<void> {\n    await createAllRecords(\n      sheetId,\n      records.map(Simplified.toRecordValues),\n      tick\n    )\n  }\n}\n\nexport type Primitive = string | number | null | boolean\n\nexport type SimpleRecord = {\n  _id: string\n  _metadata?: Record<string, any>\n} & SimpleValues\nexport type SimpleValues = { [key: string]: Primitive }\n"]}